% GUI for clinician to fully process and analyze a subject who has
% undergone a CVR study 
% 
% File Name: process_subject.m
% 
% NOTES - HS - 16/05/30 - Initial Creation
% 
% AUTHOR - Hannah Sennik
% Created - 2016-05-30

clear all; % Clear all variables
close all; % Close all windows 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INITIALIZING VARIABLES

addpath('/data/wayne/matlab/NIFTI'); % path to nii functions
directories.main = ('/data/projects/CVR/GUI_subjects'); % base directory where all CVR subjects are stored
cd(directories.main); % change to this directory
subject_names = dir(directories.main); % get subject names from main directory 
subj = ''; % initialize subj variable (struct)
subj.date = '160314'; % What is this - is it the same for all subjects?
directories.subject = ''; % initialize subject directory
directories.matlabdir = '/data/hannahsennik/MATLAB/CVR_GUI'; % specify the matlab directory that contains python and standard files 
directories.REDCapdir = 'REDCap_import_files'; % directory name for REDCap files 
directories.metadata = 'metadata'; % directory name for subject specific files to be inputted to pipeline
directories.textfilesdir = 'textfiles'; % directory name for output of textfiles generated by this program 
directories.timeseries = 'timeseries'; % directory name for output of .1D files generated by this program 
directories.flirtdir = 'flirt';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SETTING UP UICONTROLS ON THE INTERFACE

%  Create the entire interface panel
sp.f = figure('Name', 'Process and Analyze Subject',...
                        'Visible','on',...
                        'Position',[50,800,300,900],...
                        'numbertitle','off');
set(sp.f, 'MenuBar', 'none'); % remove the menu bar 
set(sp.f, 'ToolBar', 'none'); % remove the tool bar    

%  Create push button to indicate that process and analysis is done. Go
%  back to the main options GUI.
sp.look = uicontrol('Style','pushbutton',...
                   'Visible','on',...
                   'String','DONE',...
                   'Value',0,'Position',[50,15,200,60],...
                   'Enable','on',...
                   'callback',@go_to_main); % This function runs SickKids_CVR.m    
          
%  Create refresh button to be pressed if incorrect data is entered
sp.again = uicontrol('Style','pushbutton',...
                    'Visible','on',...
                    'Enable','on',...
                    'Value',0,'Position',[270,865,30,30],...
                    'callback',@first_gui_again);  % This function runs process_subject.m again 

icon=imread([directories.matlabdir '/refresh.png']); % refresh icon 
set(sp.again,'CData',icon); % setting the refresh image to show on the button 
                    
%  Descriptive text for the select subject dropdown menu                
sp.text(1) = uicontrol('Style','text',...
                        'units','normalized',...
                        'Position',[0.35,0.78,0.3,0.2],...
                        'String','Select subject');

%  Create the popupmenu to select subject to process
sp.STR = {'',subject_names(3:end).name}; % pull the directory names of patients from directory where CVR subjects are stored 
sp.menu(1) = uicontrol('Style','popupmenu',...
                        'Visible','on',...
                        'String',sp.STR,...
                        'Position',[50,820,200,25]);

waitfor(sp.menu(1),'Value');   % Wait for a subject to be selected            
set(sp.menu(1),'Enable','off'); % Disable subject field once subject is selected
temp_name = sp.menu(1).String(sp.menu(1).Value); 
subj.name = temp_name{1}; % get the subject's name
display(subj.name);

directories.subject = [directories.main '/' subj.name]; % establish the subject's directory 
cd(directories.subject); % Change to subject's directory     

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MAKING DIRECTORIES
mkdir(directories.subject,directories.timeseries); % make a directory to save ROI mask and .1D text files
mkdir(directories.subject,directories.textfilesdir); % make directory to save textfiles
mkdir(directories.subject,directories.REDCapdir); % make directory to save files to be imported to REDCap
mkdir([directories.subject '/' directories.metadata],'stim'); % make stim directory for files used for analysis
mkdir(directories.subject,directories.flirtdir); % make directory that contains outputs from transformations (fsl flirt)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  SETTING UP INFORMATION SPECIFIC TO THE SUBJECT'S STUDY

fileID = fopen([directories.matlabdir '/subject_name.txt'],'w+'); % Open the subject name text file in write mode
format = '%s\n';
fprintf(fileID,format,subj.name); % Write the subject name to file - this is used in the main GUI to look at the correct subject data 
fclose(fileID);
display('Subject name file created');

A = exist([directories.subject '/images'],'dir'); % Check if the images directory exists. If it does then the files should be in the correct .dcm format

%  Creating global values to control the contrast of the images displayed
global sigmin;
global sigmax; 

%  Initialize the values for sigmin and sigmax
sigmin = 10;
sigmax = 500;

%  Write the values to file so that they can be used when displaying data
%  in look_at_CVR_data.m
fileID = fopen([directories.textfilesdir '/sigvals.txt'],'w+'); 
format = '%d\n';
fprintf(fileID,format,sigmin);
fprintf(fileID,format,sigmax);
fclose(fileID);

%  Create push button to convert dicom files (optional button press).
sp.convert_files = uicontrol('Style','pushbutton',...
                             'Visible','on',...
                             'String','Convert Files',...
                             'Enable','on',...
                             'Value',0,'Position',[50,735,200,60],...
                             'callback',{@convert_files}); % if button is pressed, run renameDicom.py on files 
                         
if A == 7 % the images directory exists
    set(sp.convert_files,'Enable','off') % Disable the convert files button since files are already converted
    set(sp.convert_files,'String','Files Converted');
else
    errormessage = errordlg('Dicom files are not in the correct format');
    waitfor(sp.convert_files,'Value');
end
                         
%  Descriptive text for the select stimulus dropdown menu                
sp.text(1) = uicontrol('Style','text',...
                        'units','normalized',...
                        'Position',[0.3,0.69,0.4,0.1],...
                        'String','Select study type'); 
                         
%  Create dropdown for breathhold study selection 
sp.study_selection = uicontrol('Style','popupmenu',...
                                'Visible','on',...
                                'Enable','on',...
                                'String',{'','BH/HV/Motor','GA: CVR/Sensory','RespirAct'},...
                                'Position',[50,650,200,25]);   
                        
waitfor(sp.study_selection,'Value');
set(sp.study_selection,'Enable','off');

if sp.study_selection.Value == 2 || sp.study_selection.Value == 3 % if the study selection is BH/HV/Motor or GA
    if sp.study_selection.Value == 2 % if the study selection is BH/HV/Motor create these fields
        string1 = 'Enter number of BH studies: ';
        string2 = 'Enter number of HV studies: ';
        string3 = 'Enter number of motor studies: ';
    elseif sp.study_selection.Value == 3 % if the study selection is GA create these fields
        string1 = 'Enter number of CVR studies: ';
        string2 = 'Enter number of sensory studies: ';
    end
    
    %  Create the descriptors for entering study information
    sp.specify_first = uicontrol('Style','text',...
                                'units','normalized',...
                                'Position',[0.05,0.64,0.635,0.05],...
                                'String',string1);                                    

    sp.specify_second = uicontrol('Style','text',...
                                'units','normalized',...
                                'Position',[0.05,0.60,0.75,0.05],...
                                'String',string2);  
    
    %  Create edit boxes to enter the number of each study                         
    sp.specify_first_textbox = uicontrol('Style','edit',...
                                        'Units','pixels',... 
                                        'Enable','on',...
                                        'Position',[245,605,35,20]); 

    sp.specify_second_textbox = uicontrol('Style','edit',...
                                        'Units','pixels',...
                                        'Enable','on',...
                                        'Position',[245,570,35,20]);                                  
    
    if sp.study_selection.Value == 2 % if the study selection is BH/HV/Motor, then create a third study information field for motor                              
        sp.specify_third = uicontrol('Style','text',...
                                    'units','normalized',...
                                    'Position',[0.05,0.56,0.68,0.05],...
                                    'String',string3);
                                
        sp.specify_third_textbox = uicontrol('Style','edit',...
                                          'Units','pixels',...
                                          'Enable','on',...
                                          'Position',[245,535,35,20]);
                                      
        waitfor(sp.specify_third_textbox,'String'); % wait for data to be entered in the third field then disable all fields
        set(sp.specify_first_textbox,'Enable','off');
        set(sp.specify_second_textbox,'Enable','off');
        set(sp.specify_third_textbox,'Enable','off');
    else
        waitfor(sp.specify_second_textbox,'String'); % wait for data to be entered in the second field then disable all fields 
        set(sp.specify_first_textbox,'Enable','off');
        set(sp.specify_second_textbox,'Enable','off');
    end

end

%  Open a file for writing the study type - to be used in the pipeline
fileID = fopen([directories.textfilesdir '/stimsel.txt'],'w+'); 
format = '%d';

%  Establishing what study names should be placed in a dropdown to select a
%  specific study for analysis
if sp.study_selection.Value == 2 || sp.study_selection.Value == 3

    i = 0;
    j = 0;
    k = 0;
    
    number_of_first = str2num(sp.specify_first_textbox.String);  % number entered in the first field
    number_of_second = str2num(sp.specify_second_textbox.String); % number entered in the second field 
    
    if sp.study_selection.Value == 2
        first_string = 'BH';
        second_string = 'HV';
        fprintf(fileID,format,2);
    elseif sp.study_selection.Value == 3
        first_string = 'CVR';
        second_string = 'SENS';
        fprintf(fileID,format,3);
    end
    third_string = 'MOT';

    C{1,1} = '';

    if number_of_first > 0
        for i = 1:number_of_first
            bh{i} = [first_string num2str(i)];
            C{1,1+i} = bh{i};
        end
    end

    if number_of_second > 0
        for j= 1:number_of_second
            if number_of_second == 1
                hv{j} = second_string;
            else
            hv{j} = [second_string num2str(j)];
            end
            C{1,1+i+j} = hv{j};
        end
    end

    if sp.study_selection.Value == 2
        number_of_third = str2num(sp.specify_third_textbox.String);
        if number_of_third > 0
            for k = 1:number_of_third
                if number_of_third == 1
                    m{k} = third_string;
                else
                    m{k} = [third_string num2str(k)];
                end
                C{1,1+i+j+k} = m{k};
            end
            C{1+i+j+k+1} = 'MOTR';
            C{1+i+j+k+2} = 'MOTL';
        end
    elseif sp.study_selection.Value == 3
        if number_of_second > 0
            C{1,i+j+2} = 'SENSR';
            C{1,i+j+3} = 'SENSL';
        end
    end
end

fclose(fileID); % close the file 

B = exist([directories.subject '/data/processed'],'dir'); % check if the processed directory exists in data. This means that the raw data has already been run through the processing pipeline. Don't want to process again. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  PROCESSING THE SUBJECT

if B == 7 % the processed directory exists, disable processing button
    process_string = 'Subject Processed';
    enable_string = 'off';
else % need to process the subject
   process_string = 'Process Subject';
   enable_string = 'on';
end

%  Create push button to process subject.
sp.process = uicontrol('Style','togglebutton',...
                'Visible','on',...
                'String',process_string,...,
                'Enable',enable_string,...
                'Value',0,'Position',[50,455,200,60],...
                'callback',{@processing_pipeline,subj,directories});

if strcmp(process_string,'Process Subject');
    waitfor(sp.process,'Value');
end
            
pause(3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  AFTER THE SUBJECT HAS BEEN PROCESSED

%  Current study dropdown description to select a specific study to analyze
sp.userprompt = uicontrol('Style','text',...
                                'units','normalized',...
                                'Position',[0.02,0.4,0.4,0.08],...
                                'String','Current Study: ');

%  Create dropdown for specific study selection 
sp.specific_study_selection = uicontrol('Style','popupmenu',...
                                'Visible','on',...
                                'Enable','on',...
                                'String',C,...
                                'Position',[125,425,150,10]);      
                        
waitfor(sp.specific_study_selection,'Value'); % wait for the user to select a specific study 
temp_selection = sp.specific_study_selection.String(sp.specific_study_selection.Value);
subj.breathhold = temp_selection{1}; % set that study as subj.breathhold
set(sp.specific_study_selection,'Enable','off'); % Disable the select study button 

fileID = fopen([directories.textfilesdir '/breathhold_selection.txt'],'w+'); % Open the breathhold selection text file in write mode 
format = '%s';
fprintf(fileID,format,subj.breathhold); % write subj.breathhold to file, need this information in the pipeline
fclose(fileID);

% This is done to pull the 'standard' boxcars and edit them for each
% breathhold if necessary 
if strcmp(subj.breathhold,'BH1') == 1 || strcmp(subj.breathhold,'BH2') == 1
    use = 'BH'; % the standard boxcar for breathhold is named standard_BH.1D
elseif strcmp(subj.breathhold,'CVR1') == 1 || strcmp(subj.breathhold,'CVR2') == 1
    use = 'CVR';
else 
    use = subj.breathhold;
end
boxcar = [directories.matlabdir '/python/standard_' use '.1D'];

% subj.proc_rec_sel is a variable for the name of the study as it would be
% referred to at the recon and processing steps (here right and left is not
% distinguished between for MOT and SENS)
if strcmp(subj.breathhold,'MOTR') == 1 || strcmp(subj.breathhold,'MOTL') == 1
    subj.proc_rec_sel = 'MOT';
elseif strcmp(subj.breathhold,'SENSR') == 1 || strcmp(subj.breathhold,'SENSL') == 1 
    subj.proc_rec_sel = 'SENS';
else
    subj.proc_rec_sel = subj.breathhold;
end

if strcmp(subj.proc_rec_sel,'MOT') == 1 || strcmp(subj.proc_rec_sel,'SENS') == 1
    for processed = 1:2
        if processed == 1
            tag = 'processed';
        else
            tage = 'raw';
        end
    copyfile(['data/' tag '/CVR_' subj.date '/final/' subj.name '_' subj.proc_rec_sel '_CVR_' subj.date '.nii'],['data/' tag '/CVR_' subj.date '/final/' subj.name '_' subj.breathhold '_CVR_' subj.date '.nii'],'f');
    copyfile(['data/' tag '/CVR_' subj.date '/final/' subj.name '_' subj.proc_rec_sel '_CVR_' subj.date '_mask.nii'],['data/' tag '/CVR_' subj.date '/final/' subj.name '_' subj.breathhold '_CVR_' subj.date '_mask.nii'],'f');
    end
end

fileID = fopen([directories.textfilesdir '/gen_selection.txt'],'w+'); % Open the gen_selection textfile in write mode
format = '%s';
fprintf(fileID,format,subj.proc_rec_sel); % write this to file, will be used in processing pipeline
fclose(fileID);

%  Load in the functional data that comes out of the processing pipeline,

functional_data = ['data/processed/CVR_' subj.date '/final/' subj.name '_' subj.proc_rec_sel '_CVR_' subj.date '.nii'];
funct = load_nii([directories.subject '/' functional_data]);

%  Check the time of the functional data 
funct.time = funct.hdr.dime.dim(5);

%  Initializing the stim filename that will be placed in the stim directory
copy_stim = [directories.subject '/' directories.metadata '/stim/bhonset' subj.name '_' subj.breathhold '.1D'];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  CHECKING IF THE STANDARD STIMULUS FILES MATCH THE LENGTH OF THE
%  FUNCTIONAL DATA

fileID = fopen(boxcar, 'rt'); % open the standard boxcar 
assert(fileID ~= -1, 'Could not read: %s', boxcar);
x = onCleanup(@() fclose(fileID));
count = 0;
while ~feof(fileID)
    count = count + sum( fread( fileID, 16384, 'char' ) == char(10) ); % count the number of lines in the file 
end
fclose(fileID);

fileID = fopen(boxcar, 'r');
if(count > funct.time) % if the number of lines are greater than the time of functional data 
    for i = 1:abs(count - funct.time)
        fgetl(fileID); % remove those lines from the file
    end
    buffer = fread(fileID,Inf); % read the remaining lines into buffer
    fclose(fileID); % close boxcar
    fileID = fopen(copy_stim,'w+'); % open the file in the stim directory 
    fwrite(fileID,buffer); % write buffer to file 
    fclose(fileID); % close copy_stim
elseif(count < funct.time) % if the number of lines are less than the time of functional data 
    copyfile(boxcar,copy_stim,'f'); % copy boxcar to copy_stim
    fileID = fopen(copy_stim,'a'); % open copy_stim
    for i = 1:abs(funct.time - count)
        fprintf(fileID,format,0); % write 0's to file for the lines that are missing 
    end
    fclose(fileID); 
elseif(count == funct.time) % if the number of lines are the same as the time of functional data 
    copyfile(boxcar,copy_stim,'f'); % directly copy boxcar to copy_stim in the stim directory and don't make any changes 
end            
  
if sp.study_selection.Value == 2 || sp.study_selection.Value == 3 % if BH or GA is selected create radiobuttons for boxcar selection 
    %  Create button group for the boxcar selection radio buttons 
    bg = uibuttongroup('Visible','off',...
                       'Title','Boxcar Selection',...
                      'Position',[0.15 0.32 .7 .12],...
                      'SelectionChangedFcn',{@bselection,directories}); % function ensures that only one radiobutton can be pressed at a time 

    %  Radiobutton for standard boxcar 
    sp.boxcar(1) = uicontrol(bg,'Style','radiobutton',...
                            'Visible','on',...
                            'Units','pixels',...
                            'String','Standard Boxcar',...
                            'HandleVisibility','off',...
                            'Position',[10,50,200,25],...
                            'Enable','on',...
                            'callback',{@standard_selected,subj,directories,funct}); % function closes all other windows and calls function to display average brain timeseries
         
    %  Radiobutton for customized boxcar 
    sp.boxcar(2) = uicontrol(bg,'Style','radiobutton',...
                            'Visible','on',...
                            'Units','pixels',...
                            'String','Shift the Standard Boxcar',...
                            'HandleVisibility','off',...
                            'Position',[10,25,200,25],...
                            'Enable','on',...
                            'callback',{@adjust_boxcar,subj,directories,funct}); % function calls function to display axial slices to allow user to draw ROI and extract timeseries

    %  Radiobutton for customized boxcar 
    sp.boxcar(3) = uicontrol(bg,'Style','radiobutton',...
                            'Visible','on',...
                            'Units','pixels',...
                            'String','Create Customized Boxcar',...
                            'HandleVisibility','off',...
                            'Position',[10,0,200,25],...
                            'Enable','on',...
                            'callback',{@adjust_boxcar,subj,directories,funct}); % function calls function to display axial slices to allow user to draw ROI and extract timeseries  

    bg.Visible = 'on';
end


%  Descriptive text for browse other models dropdown menu                
sp.text(1) = uicontrol('Style','text',...
                        'units','normalized',...
                        'Position',[0.3,0.19,0.4,0.1],...
                        'String','Browse other models');  
                    
%  Checkbox for including pf in the analysis
sp.pf = uicontrol('Style','checkbox',...
                    'String','pf',...
                    'Value',1,'Position',[250 260 50 20]);

%  Checkbox for analyzing raw data as well 
sp.raw = uicontrol('Style','checkbox',...
                    'String','raw',...
                    'Value',1,'Position',[250 240 50 20]);    
                
%  Dropdown for browse alternative stim method
sp.alternative_methods = uicontrol('Style','popupmenu',...
                        'Visible','on',...
                        'String',{'','Respiratory Bellows','End tidal CO2'},...
                        'HandleVisibility','on',...
                        'Position',[50,200,200,25],...
                        'Enable','off',...
                        'callback',@dialoguebox); 
                   
%  Create push button to analyze subject.
sp.start = uicontrol('Style','pushbutton',...
                    'Visible','on',...
                    'String','Analyze Subject',...,
                    'Enable','on',...
                    'Value',0,'Position',[50,120,200,60],...
                    'callback',{@analyze_subject,subj,directories});                             
 
% if exist(['data/analyzed_standard_boxcar/CVR_' subj.date '/final/' subj.name '_' subj.breathhold '_CVR_' subj.date '_glm_buck.nii'],'file') == 2               
%     set(sp.start,'Enable','off');
%     set(sp.look,'Enable','on');
% end               
               
%  Since standard boxcar is the first radiobutton that will be selected,
%  call the function to display the average brain timeseries against the
%  standard boxcar
pos = [358,800,900,670]; % initialize the position of the window to show the average brain timeseries plot
stim = [directories.subject '/' directories.metadata '/stim/bhonset' subj.name '_' subj.breathhold '.1D']; % initialize the stimfile selection as the standard boxcar
boxcar_name = 'Standard Boxcar';
shift_capability = 0;
average_brain_timeseries(subj,directories,funct,pos,stim,boxcar_name,shift_capability,sp); % call the function to plot the average brain timeseries against the standard boxcar              

%  Get figure data 
guidata(sp.f,sp);                  