function CVRmap_function_axial(anat,funct,figurename)

%  Axial functional data 
funct.ax.mapped_anat = double(repmat(imresize(squeeze(funct.mapped_anat.img(:,:,anat.slice_z)),[anat.x anat.y]), [1 1 3]));
funct.ax.mask = double(imresize(squeeze(funct.mapped_anat.img(:,:,anat.slice_z)),[anat.x anat.y],'nearest'));
funct.ax.pixel_dimension = funct.mapped_anat.hdr.dime.pixdim(4);

%  Coronal functional data

funct.cor.mapped_anat = double(repmat(imresize(squeeze(funct.mapped_anat.img(:,anat.slice_y,:)),[anat.x anat.z]), [1 1 3]));
funct.cor.mask = double(imresize(squeeze(funct.mapped_anat.img(:,anat.slice_y,:)),[anat.x anat.z],'nearest'));
funct.cor.pixel_dimension = funct.mapped_anat.hdr.dime.pixdim(3);

%  Saggital functional data

funct.sag.mapped_anat = double(repmat(imresize(squeeze(funct.mapped_anat.img(anat.slice_x,:,:)),[anat.y anat.z]), [1 1 3]));
funct.sag.mask = double(imresize(squeeze(funct.mapped_anat.img(anat.slice_x,:,:)),[anat.y anat.z],'nearest'));
funct.sag.pixel_dimension = funct.mapped_anat.hdr.dime.pixdim(2);

%  AXIAL

thresh_indices = find (funct.ax.mask < (max(funct.ax.mask(:))-0.001)); % find all indices that contain the values specified
thresh_vec = reshape (funct.ax.mask, [(size(funct.ax.mask,1)*size(funct.ax.mask,2)) 1]); % turn 3D array into vector 
thresh_values = thresh_vec(thresh_indices); % place the values at specified array indices in to another array

positive = find(thresh_values > funct.p_value);
positive_values = thresh_values(positive); 
positive_full_array = zeros((size(funct.ax.mask,1)*size(funct.ax.mask,2)),1);
positive_full_array(positive) = 1; % equals one makes a binary mask (all positive values will have the same intensity of red)
positive_full_array_vol = reshape(positive_full_array,[size(funct.ax.mask,1) size(funct.ax.mask,2) 1]);
positive_full_array_vol = imresize(positive_full_array_vol,[anat.x anat.y/anat.hdr.dime.pixdim(4)]);
positive_full_array_vol = rot90(positive_full_array_vol(anat.xrange,anat.yrange,:));
positive_full_array_vol = flip(positive_full_array_vol,2);

negative = find(thresh_values < -funct.p_value);
negative_values = thresh_values(negative);
negative_full_array = zeros((size(funct.ax.mask,1)*size(funct.ax.mask,2)),1);
negative_full_array(negative) = 1;
negative_full_array_vol = reshape(negative_full_array,[size(funct.ax.mask,1) size(funct.ax.mask,2) 1]);
negative_full_array_vol = imresize(negative_full_array_vol,[anat.x anat.y/anat.hdr.dime.pixdim(4)]);
negative_full_array_vol = rot90(negative_full_array_vol(anat.xrange,anat.yrange,:));
negative_full_array_vol = flip(negative_full_array_vol,2);

anat.slice_ax = (double(repmat(imresize(squeeze(anat.img(:,:,anat.slice_z)),[anat.x anat.y]),[1 1 3]))-anat.sigmin) / anat.sigmax;
anat.slice_ax = rot90(anat.slice_ax(anat.xrange,anat.yrange,:));
anat.slice_ax = flip(anat.slice_ax,2);

anat.slice_ax(:,:,1) = anat.slice_ax(:,:,1) + positive_full_array_vol; 
anat.slice_ax(:,:,3) = anat.slice_ax(:,:,3) + negative_full_array_vol;

% axmap = figure('Name', figurename.ax_map);
imshow(anat.slice_ax);

% %  CORONAL
% 
% thresh_indices2 = find (funct.cor.mask < (max(funct.cor.mask(:))-0.001)); % find all indices that contain the values specified
% thresh_vec2 = reshape (funct.cor.mask, [(size(funct.cor.mask,1)*size(funct.cor.mask,2)) 1]); % turn 3D array into vector 
% thresh_values2 = thresh_vec2(thresh_indices2); % place the values at specified array indices in to another array
% 
% positive2 = find(thresh_values2 > funct.p_value);
% positive_values2 = thresh_values2(positive2); 
% positive_full_array2 = zeros((size(funct.cor.mask,1)*size(funct.cor.mask,2)),1);
% positive_full_array2(positive2) = 1; % equals one makes a binary mask (all positive values will have the same intensity of red)
% positive_full_array_vol2 = reshape(positive_full_array2,[size(funct.cor.mask,1) size(funct.cor.mask,2) 1]);
% positive_full_array_vol2 = imresize(positive_full_array_vol2,[anat.x anat.z/anat.hdr.dime.pixdim(3)]);
% positive_full_array_vol2 = rot90(positive_full_array_vol2(anat.xrange,anat.zrange,:));
% positive_full_array_vol2 = flip(positive_full_array_vol2,2);
% 
% negative2 = find(thresh_values2 < -funct.p_value);
% negative_values2 = thresh_values2(negative2);
% negative_full_array2 = zeros((size(funct.cor.mask,1)*size(funct.cor.mask,2)),1);
% negative_full_array2(negative2) = 1;
% negative_full_array_vol2 = reshape(negative_full_array2,[size(funct.cor.mask,1) size(funct.cor.mask,2) 1]);
% negative_full_array_vol2 = imresize(negative_full_array_vol2,[anat.x anat.z/anat.hdr.dime.pixdim(3)]);
% negative_full_array_vol2 = rot90(negative_full_array_vol2(anat.xrange,anat.zrange,:));
% negative_full_array_vol2 = flip(negative_full_array_vol2,2);
% 
% anat.slice_cor(:,:,1) = anat.slice_cor(:,:,1) + positive_full_array_vol2; 
% anat.slice_cor(:,:,3) = anat.slice_cor(:,:,3) + negative_full_array_vol2;
% 
% cormap = figure('Name', figurename.cor_map);
% imshow(anat.slice_cor);
% 
% %  SAGGITAL
% 
% thresh_indices3 = find (funct.sag.mask < (max(funct.sag.mask(:))-0.001)); % find all indices that contain the values specified
% thresh_vec3 = reshape (funct.sag.mask, [(size(funct.sag.mask,1)*size(funct.sag.mask,2)) 1]); % turn 3D array into vector 
% thresh_values3 = thresh_vec3(thresh_indices3); % place the values at specified array indices in to another array
% 
% positive3 = find(thresh_values3 > funct.p_value);
% positive_values3 = thresh_values3(positive3); 
% positive_full_array3 = zeros((size(funct.sag.mask,1)*size(funct.sag.mask,2)),1);
% positive_full_array3(positive3) = 1; % equals one makes a binary mask (all positive values will have the same intensity of red)
% positive_full_array_vol3 = reshape(positive_full_array3,[size(funct.sag.mask,1) size(funct.sag.mask,2) 1]);
% positive_full_array_vol3 = imresize(positive_full_array_vol3,[anat.y anat.z/anat.hdr.dime.pixdim(2)]);
% positive_full_array_vol3 = rot90(positive_full_array_vol3(anat.yrange,anat.zrange,:));
% positive_full_array_vol3 = flip(positive_full_array_vol3,2);
% 
% negative3 = find(thresh_values3 < -funct.p_value);
% negative_values3 = thresh_values3(negative3);
% negative_full_array3 = zeros((size(funct.sag.mask,1)*size(funct.sag.mask,2)),1);
% negative_full_array3(negative3) = 1;
% negative_full_array_vol3 = reshape(negative_full_array3,[size(funct.sag.mask,1) size(funct.sag.mask,2) 1]);
% negative_full_array_vol3 = imresize(negative_full_array_vol3,[anat.y anat.z/anat.hdr.dime.pixdim(2)]);
% negative_full_array_vol3 = rot90(negative_full_array_vol3(anat.yrange,anat.zrange,:));
% negative_full_array_vol3 = flip(negative_full_array_vol3,2);
% 
% anat.slice_sag(:,:,1) = anat.slice_sag(:,:,1) + positive_full_array_vol3; 
% anat.slice_sag(:,:,3) = anat.slice_sag(:,:,3) + negative_full_array_vol3;
% 
% sagmap = figure('Name', figurename.sag_map);
% imshow(anat.slice_sag);

end
